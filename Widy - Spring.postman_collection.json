{
	"info": {
		"_postman_id": "ccf6e797-7287-42ca-aef3-e5a504a413e3",
		"name": "Widy - Spring",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "10430331"
	},
	"item": [
		{
			"name": "Registration",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"pm.test('Status code is 201', function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string - Toko berhasil didaftarkan\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Toko berhasil didaftarkan\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body data should contain name and email\", function () {\r",
							"    pm.expect(response.data).to.have.property('name');\r",
							"    pm.expect(response.data).to.have.property('email');\r",
							"});\r",
							"\r",
							"pm.environment.set(\"namaToko\", response.data?.name);\r",
							"pm.environment.set(\"emailAddress\", response.data?.email);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{$randomCompanyName}}\",\r\n    \"email\": \"{{$randomExampleEmail}}\",\r\n    \"password\": \"Test123!!!\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/registration",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"registration"
					]
				}
			},
			"response": []
		},
		{
			"name": "Auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Authentication berhasil ditambahkan\");\r",
							"});\r",
							"\r",
							"pm.test(\"Assert response email\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var expectedEmail = pm.variables.get(\"expected_email\");\r",
							"    pm.expect(jsonData.email).to.eql(expectedEmail);\r",
							"});\r",
							"\r",
							"// Get token and set to env\r",
							"var jsonData = pm.response.json();\r",
							"var resAccessToken = jsonData.data.accessToken;\r",
							"\r",
							"pm.environment.set(\"accessToken\", resAccessToken);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{fixedAdminEmail}}\",\r\n    \"password\": \"Test123!!!\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/authentications",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"authentications"
					]
				}
			},
			"response": []
		},
		{
			"name": "addUnit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Assert unitId and name should not undefined\", function () {\r",
							"    pm.expect(response.data).to.have.property('unitId');\r",
							"    pm.expect(response.data).to.have.property('name');\r",
							"    pm.expect(response.data.unitId).not.be.undefined;\r",
							"    pm.expect(response.data.name).not.null;\r",
							"});\r",
							"\r",
							"pm.test(\"Success message 'Unit berhasil ditambahkan'\", function () {\r",
							"    pm.expect(response.message).to.eql('Unit berhasil ditambahkan');\r",
							"});\r",
							"\r",
							"\r",
							"pm.environment.set(\"unitId\", response.data.unitId);\r",
							"pm.environment.set(\"unitName\", response.data.name);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{$randomNoun}}\",\r\n    \"description\": \"{{$randomWords}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/units",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"units"
					]
				}
			},
			"response": []
		},
		{
			"name": "unitDetails",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Assert unit name and description should not undefined\", function () {\r",
							"    pm.expect(response.data.unit).to.have.property('name');\r",
							"    pm.expect(response.data.unit).to.have.property('description');\r",
							"    pm.expect(response.data.unit).not.be.undefined;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/units/{{unitId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"units",
						"{{unitId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "unitLists",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const units = response.data?.units;\r",
							"const unitData = units[Math.floor(Math.random() * units.length)];\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Assert units should have complete property\", function () {\r",
							"    pm.expect(unitData).to.have.property('id');\r",
							"    pm.expect(unitData).to.have.property('name');\r",
							"    pm.expect(unitData).to.have.property('description');\r",
							"    pm.expect(units).not.be.undefined;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{$randomNoun}}\",\r\n    \"description\": \"{{$randomWords}}\"\r\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/units",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"units"
					]
				}
			},
			"response": []
		},
		{
			"name": "updateUnit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Assert unitId and name should not undefined\", function () {\r",
							"    pm.expect(response.data).to.have.property('name');\r",
							"    pm.expect(response.data).not.be.undefined;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"(update) {{$randomNoun}}\",\r\n    \"description\": \"(update) {{$randomWords}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/units/{{unitId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"units",
						"{{unitId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "deleteUnit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/units/{{unitId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"units",
						"{{unitId}}"
					]
				}
			},
			"response": []
		}
	]
}